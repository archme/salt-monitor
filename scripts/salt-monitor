#!/usr/bin/python2
'''
This script is used to kick off a salt monitor
'''
import optparse
import os

import salt
import salt.ext.monitor
import salt.ext.monitor.config
import salt.ext.monitor.monitor
import salt.log
import salt.utils

class Monitor(object):
    '''
    Create a monitor server
    '''
    def __init__(self):
        self.cli = self.__parse_cli()
        self.opts = salt.ext.monitor.config.monitor_config(self.cli['config'])

    def __parse_cli(self):
        '''
        Parse the cli input
        '''
        parser = optparse.OptionParser()
        parser.add_option('-d',
                '--daemon',
                dest='daemon',
                default=False,
                action='store_true',
                help='Run the monitor as a daemon')
        parser.add_option('-c',
                '--config',
                dest='config',
                default='/etc/salt/monitor',
                help='Pass in an alternative configuration file')
        parser.add_option('-l',
                '--log-level',
                dest='log_level',
                default='warning',
                choices=salt.log.LOG_LEVELS.keys(),
                help='Console log level. One of %s. For the logfile settings '
                     'see the config file. Default: \'%%default\'.' %
                     ', '.join([repr(l) for l in salt.log.LOG_LEVELS.keys()]))

        options, args = parser.parse_args()
        salt.log.setup_console_logger(options.log_level)
        cli = {'daemon': options.daemon,
               'config': options.config}

        return cli

    def start(self):
        '''
        Execute this method to start up a monitor.
        '''
        salt.log.setup_logfile_logger(
            self.opts['log_file'], self.opts['log_level']
        )
        for name, level in self.opts['log_granular_levels'].iteritems():
            salt.log.set_logger_level(name, level)

        salt.verify_env([os.path.dirname(self.opts['log_file'])])

        monitor = salt.ext.monitor.monitor.Monitor(self.opts)
        if self.cli['daemon']:
            salt.utils.daemonize()
        monitor.start()

def main():
    '''
    The main function
    '''
    pid = os.getpid()
    try:
        Monitor().start()
    except KeyboardInterrupt:
        os.kill(pid, 15)

if __name__ == '__main__':
    main()

